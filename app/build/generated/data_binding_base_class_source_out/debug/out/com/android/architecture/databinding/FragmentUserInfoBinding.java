// Generated by data binding compiler. Do not edit!
package com.android.architecture.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.databinding.Bindable;
import androidx.databinding.DataBindingUtil;
import androidx.databinding.ViewDataBinding;
import com.android.architecture.R;
import com.android.architecture.common.RecycleViewItemClickListener;
import com.android.architecture.data.repository.network.User;
import java.lang.Deprecated;
import java.lang.Object;

public abstract class FragmentUserInfoBinding extends ViewDataBinding {
  @NonNull
  public final ConstraintLayout clContent;

  @NonNull
  public final ImageView imageView;

  @NonNull
  public final TextView tvCompany;

  @NonNull
  public final TextView tvName;

  @NonNull
  public final TextView tvPublicGists;

  @NonNull
  public final TextView tvPublicRepose;

  @Bindable
  protected User mItem;

  @Bindable
  protected RecycleViewItemClickListener mItemClickListener;

  protected FragmentUserInfoBinding(Object _bindingComponent, View _root, int _localFieldCount,
      ConstraintLayout clContent, ImageView imageView, TextView tvCompany, TextView tvName,
      TextView tvPublicGists, TextView tvPublicRepose) {
    super(_bindingComponent, _root, _localFieldCount);
    this.clContent = clContent;
    this.imageView = imageView;
    this.tvCompany = tvCompany;
    this.tvName = tvName;
    this.tvPublicGists = tvPublicGists;
    this.tvPublicRepose = tvPublicRepose;
  }

  public abstract void setItem(@Nullable User item);

  @Nullable
  public User getItem() {
    return mItem;
  }

  public abstract void setItemClickListener(
      @Nullable RecycleViewItemClickListener itemClickListener);

  @Nullable
  public RecycleViewItemClickListener getItemClickListener() {
    return mItemClickListener;
  }

  @NonNull
  public static FragmentUserInfoBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup root, boolean attachToRoot) {
    return inflate(inflater, root, attachToRoot, DataBindingUtil.getDefaultComponent());
  }

  /**
   * This method receives DataBindingComponent instance as type Object instead of
   * type DataBindingComponent to avoid causing too many compilation errors if
   * compilation fails for another reason.
   * https://issuetracker.google.com/issues/116541301
   * @Deprecated Use DataBindingUtil.inflate(inflater, R.layout.fragment_user_info, root, attachToRoot, component)
   */
  @NonNull
  @Deprecated
  public static FragmentUserInfoBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup root, boolean attachToRoot, @Nullable Object component) {
    return ViewDataBinding.<FragmentUserInfoBinding>inflateInternal(inflater, R.layout.fragment_user_info, root, attachToRoot, component);
  }

  @NonNull
  public static FragmentUserInfoBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, DataBindingUtil.getDefaultComponent());
  }

  /**
   * This method receives DataBindingComponent instance as type Object instead of
   * type DataBindingComponent to avoid causing too many compilation errors if
   * compilation fails for another reason.
   * https://issuetracker.google.com/issues/116541301
   * @Deprecated Use DataBindingUtil.inflate(inflater, R.layout.fragment_user_info, null, false, component)
   */
  @NonNull
  @Deprecated
  public static FragmentUserInfoBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable Object component) {
    return ViewDataBinding.<FragmentUserInfoBinding>inflateInternal(inflater, R.layout.fragment_user_info, null, false, component);
  }

  public static FragmentUserInfoBinding bind(@NonNull View view) {
    return bind(view, DataBindingUtil.getDefaultComponent());
  }

  /**
   * This method receives DataBindingComponent instance as type Object instead of
   * type DataBindingComponent to avoid causing too many compilation errors if
   * compilation fails for another reason.
   * https://issuetracker.google.com/issues/116541301
   * @Deprecated Use DataBindingUtil.bind(view, component)
   */
  @Deprecated
  public static FragmentUserInfoBinding bind(@NonNull View view, @Nullable Object component) {
    return (FragmentUserInfoBinding)bind(component, view, R.layout.fragment_user_info);
  }
}
